<configuration>

    <!--
      colored level
     -->
    <conversionRule conversionWord="coloredLevel" converterClass="play.api.libs.logback.ColoredLevel"/>

    <!--
      stdout
     -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <evaluator>
                <matcher>
                    <Name>healthcheck</Name>
                    <regex>.*,userAgent:\[(kube-prob|ELB-HealthChecker|Datadog Agent).*\].*,status:\[200\].*</regex>
                </matcher>
                <expression>healthcheck.matches(formattedMessage)</expression>
            </evaluator>
            <onMatch>DENY</onMatch>
        </filter>
        <encoder>
            <pattern>
                time:%date{ISO8601}&#x9;level:%level&#x9;akkaSource:%X{akkaSource}&#x9;logger:%logger&#x9;X-ApplicationId:%X{X-ApplicationId}&#x9;thread:%thread&#x9;msg:%replace(%replace(%message){'\n','\\n'}){'\t',''}&#x9;exception:%replace(%replace(%xException{5}){'\n','\\n'}){'\t',''}%n%nopex
            </pattern>
        </encoder>
    </appender>

    <!--
      Sentry
     -->
    <appender name="Sentry" class="io.sentry.logback.SentryAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>WARN</level>
        </filter>
    </appender>

    <!--
     The logger name is typically the Java/Scala package name.
     This configures the log level to log at for a package and its children packages.
    -->
    <logger name="play" level="WARN"/>
    <logger name="application" level="WARN"/>
    <logger name="scalikejdbc" level="WARN"/>
    <logger name="scala.slick" level="OFF"/>
    <logger name="io.netty" level="WARN" />
    <logger name="grpc" level="WARN" />

    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="Sentry"/>
    </root>

</configuration>
